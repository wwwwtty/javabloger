<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:security="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  
<!-- 
	拦截器队列;去除了上一版本中的FilterInvocationSecurityMetadataSource;采用了一种更加直观的方式来配置;
 -->
  	<beans:bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map path-type="ant">
			<security:filter-chain filters="FilterSecurityInterceptor" pattern="/*" />
		</security:filter-chain-map>
  	</beans:bean>
  	
  	<!-- 权限信息拦截的上下方环境.类似于Server中的Session.
  		负责保存和清理在不同的HTTP请求之间 SecurityContext
  		注:在Security环境中,用户信息等,不应该再到Session中存取,为了安全集中到SecurityContext操作;
  	 -->
  	<beans:bean id="SecurityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter"></beans:bean>
  	
    <!--   
	退出(Logout)过滤器 退出登录操作   
	-->
	<beans:bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- 退出系统后系统跳转到此URL -->
		<beans:constructor-arg value="/login.do?method=logout" index="0" />
		<!-- 退出系统后的操作(调用logout方法) -->
		<beans:constructor-arg index="1">
			<beans:list>
				<!-- 实现了LogoutHandler接口(logout方法) -->
				<!-- <bean class="com.kogc.common.service.authorize.AuthLogout" /> -->
				<beans:ref bean="rememberMeServices" />
				<beans:bean
					class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<!--
		利用cookie自动登陆filter 当SecurityContextHolder中不存在Authentication.用户授权信息，
		rememberMeProcessingFilter就会调用autoLogin()方法从cookie中获取用户信息,在验证filter之前使用
	-->
	<beans:bean id="rememberMeProcessingFilter"
		class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="rememberMeServices" ref="rememberMeServices"></beans:property>
	</beans:bean>
	
	<!--
		如果不存在任何授权信息时，自动添加匿名用户身份至SecurityContextHolder中
	-->
	<beans:bean id="anonymousProcessingFilter"
		class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<beans:property name="key" value="SpringSecurity"></beans:property>
		<beans:property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
		<!-- 
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		 -->
	</beans:bean>
	
	<!--
		集成过滤器(HttpSessionContextIntegrationFilter是集成过滤器的一个实现)
		每次request前HttpSessionContextIntegrationFilter从Session中获取Authentication对象，在request完后
		又把Authentication对象保存到Session中供下次request使用,此filter必须在其他Acegi filter前使用
	-->
	<beans:bean id="sessionManagementFilter"
		class="org.springframework.security.web.session.SessionManagementFilter" >
		<beans:constructor-arg>
			<beans:bean id='httpSessionSecurityContextRepository' class="org.springframework.security.web.context.HttpSessionSecurityContextRepository"></beans:bean>
		</beans:constructor-arg>
	</beans:bean>
	
	<!-- 将SecurityContext(上下文环境包装进Servlet -->
	<beans:bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter">
	</beans:bean>
	<!-- 用户名密码拦截器,用户登陆时必须是POST方式提交数据 -->
	<beans:bean id="usernamePasswordAuthenticationFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
	</beans:bean>
	
	<beans:bean id="RequestCacheAwareFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter"></beans:bean>
	
	<!-- 负责处理通过HTTP头部发送来的basic验证证书 -->
	<beans:bean id="BasicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
		<beans:property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint"/>
		<beans:property name="rememberMeServices" ref="rememberMeServices"></beans:property>
	</beans:bean>
	<!-- 基本的权限认证方案 -->
	<beans:bean id="basicAuthenticationEntryPoint"
	  class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
	  <beans:property name="realmName" value="TinyCMS"/>
	</beans:bean>
	<!-- 处理安全监听器抛出的异常， 提供对应的HTTP响应 -->
	<beans:bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<beans:property name="authenticationEntryPoint" ref="loginUrlAuthenticationEntryPoint"/>
  		<beans:property name="accessDeniedHandler" ref="accessDeniedHandler"/>
	</beans:bean>
	<!-- 登陆认证切入点-->
	<beans:bean id="loginUrlAuthenticationEntryPoint"
	     class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	  	<!-- 用户异常时进入登陆页面 -->
	  <beans:property name="loginFormUrl" value="/login.jsp"/>
	</beans:bean>
	<!-- 访问决择器-->
	<beans:bean id="accessDeniedHandler"
	     class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
	     <!--访问不通过时指定返回页面; 禁止访问异常  (默认403（拒绝访问） 响应到客户端 )-->
	  <beans:property name="errorPage" value="/accessDenied.htm"/>
	</beans:bean>
	
	<!-- 访问控制
	负责处理HTTP资源的安全,同时为不同HTTP URL请求配置不同属性
	 -->
	<beans:bean id="FilterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager"/>
  		<beans:property name="accessDecisionManager" ref="accessDecisionManager"/>
  		<beans:property name="securityMetadataSource">
		    <security:filter-security-metadata-source>
				<security:intercept-url pattern="/login.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
				<security:intercept-url pattern="/*" access="IS_AUTHENTICATED_FULLY"/>
		    </security:filter-security-metadata-source>
	  </beans:property>
	</beans:bean>
	
	
</beans:beans>
